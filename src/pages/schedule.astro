---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/elements/Text.astro";
import Shadow from "@/components/global/Shadow.astro";
import Navigation from "@/components/global/Navigation.astro";
import { getEntry } from 'astro:content';

const scheduleContent = await getEntry('pages', 'schedule');
if (!scheduleContent) {
  throw new Error('Schedule content not found');
}

const { title, subtitle, description, benefits = [], whatToExpect = [], calendarOptions } = scheduleContent.data;
---

<BaseLayout>
  <section class="relative overflow-hidden">
    <Shadow />
    <div class="p-8 lg:px-44 lg:py-24 2xl:px-24 relative">
      <Navigation />
      
      <div class="flex flex-col gap-12 mt-12">
        <!-- Header -->
        <div class="border p-8 border-dashed border-zinc-300 dark:border-zinc-700">
          <div class="flex items-center gap-2 text-black dark:text-white">
            <div class="size-2 rounded-lg bg-green-500 animate-pulse"></div>
            <Text
              tag="p"
              variant="textSM"
              class="text-black dark:text-white"
            >
              {subtitle}
            </Text>
          </div>
          <Text
            tag="h1"
            variant="displayLG"
            class="text-black dark:text-white tracking-wide text-balance font-serif italic"
          >
            {title}
          </Text>
          <Text
            variant="textLG"
            class="text-zinc-500 dark:text-zinc-400 mt-4 text-pretty max-w-2xl"
          >
            {description}
          </Text>
        </div>

        <!-- Benefits Grid -->
        {benefits.length > 0 && (
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 p-8 border-x border-dashed border-zinc-300 dark:border-zinc-700">
            {benefits.map((item) => (
              <div>
                <Text
                  tag="h3"
                  variant="textBase"
                  class="text-black dark:text-white block font-semibold"
                >
                  {item.title}
                </Text>
                <Text
                  tag="p"
                  variant="textBase"
                  class="text-zinc-500 dark:text-zinc-400 text-pretty"
                >
                  {item.description}
                </Text>
              </div>
            ))}
          </div>
        )}

        <!-- What to Expect -->
        {whatToExpect.length > 0 && (
          <div class="border p-8 border-dashed border-zinc-300 dark:border-zinc-700">
            <Text
              tag="h2"
              variant="displaySM"
              class="font-serif italic text-black dark:text-white mb-6"
            >
              What to Expect
            </Text>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              {whatToExpect.map((item) => (
                <div class="flex items-center gap-2 text-zinc-500 dark:text-zinc-400">
                  <div class="ring-1 ring-zinc-200 dark:ring-zinc-700 p-[0.110rem] bg-white/5 shadow rounded-sm">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="3"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-check size-2.5"
                    >
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M5 12l5 5l10 -10" />
                    </svg>
                  </div>
                  <Text variant="textSM">
                    {item}
                  </Text>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Cal.com Embed -->
        {calendarOptions?.url && (
          <div class="border border-dashed border-zinc-300 dark:border-zinc-700 w-full h-screen md:h-[800px] lg:h-[600px]">
            <div style="width:100%;height:100%;overflow:scroll" id="my-cal-inline"></div>
          </div>
        )}
      </div>
    </div>
  </section>
</BaseLayout>

<script type="text/javascript">
  (function (C, A, L) { let p = function (a, ar) { a.q.push(ar); }; let d = C.document; C.Cal = C.Cal || function () { let cal = C.Cal; let ar = arguments; if (!cal.loaded) { cal.ns = {}; cal.q = cal.q || []; d.head.appendChild(d.createElement("script")).src = A; cal.loaded = true; } if (ar[0] === L) { const api = function () { p(api, arguments); }; const namespace = ar[1]; api.q = api.q || []; if(typeof namespace === "string"){cal.ns[namespace] = cal.ns[namespace] || api;p(cal.ns[namespace], ar);p(cal, ["initNamespace", namespace]);} else p(cal, ar); return;} p(cal, ar); }; })(window, "https://app.cal.com/embed/embed.js", "init");
  Cal("init", "services-review", {origin:"https://cal.com"});
  Cal.ns["services-review"]("inline", {
    elementOrSelector:"#my-cal-inline",
    config: {"layout":"month_view"},
    calLink: "broke-dev/services-review"
  });
  Cal.ns["services-review"]("ui", {
    "cssVarsPerTheme":{
      "light":{"cal-brand":"#292929"},
      "dark":{"cal-brand":"#fafafa"}
    },
    "hideEventTypeDetails":false,
    "layout":"month_view"
  });
</script>
